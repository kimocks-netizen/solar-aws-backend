#!/bin/bash

# Script to create DynamoDB table with matching IoT rule
# Usage: ./create_iot_table_with_rule.sh <table_name> <topic_filter>
# Example: ./create_iot_table_with_rule.sh my_sensor_data "sensor/+/data"

set -e  # Exit on any error

TABLE_NAME=$1
TOPIC_FILTER=${2:-"#"}  # Default to all topics if not specified
REGION="eu-north-1"
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
IOT_ROLE_NAME="IoTMessageLoggerRole"

if [ -z "$TABLE_NAME" ]; then
    echo "‚ùå Usage: $0 <table_name> [topic_filter]"
    echo "   Example: $0 my_sensor_data 'sensor/+/data'"
    exit 1
fi

echo "üöÄ CREATING DYNAMODB TABLE + IOT RULE FOR: $TABLE_NAME"
echo "=" * 60
echo "üìã Table: $TABLE_NAME"
echo "üìã Topic Filter: $TOPIC_FILTER"
echo "üìã Region: $REGION"
echo ""

# Step 1: Create DynamoDB table with standard IoT schema
echo "1Ô∏è‚É£ Creating DynamoDB table..."
aws dynamodb create-table \
    --table-name "$TABLE_NAME" \
    --attribute-definitions \
        AttributeName=timestamp,AttributeType=S \
        AttributeName=topic,AttributeType=S \
    --key-schema \
        AttributeName=timestamp,KeyType=HASH \
        AttributeName=topic,KeyType=RANGE \
    --billing-mode PAY_PER_REQUEST \
    --region $REGION && \
    echo "‚úÖ Table created successfully!" || \
    { echo "‚ùå Table creation failed!"; exit 1; }

# Step 2: Wait for table to be active
echo ""
echo "2Ô∏è‚É£ Waiting for table to become active..."
aws dynamodb wait table-exists \
    --table-name "$TABLE_NAME" \
    --region $REGION && \
    echo "‚úÖ Table is active!" || \
    { echo "‚ùå Table activation timeout!"; exit 1; }

# Step 3: Update IAM policy to include new table
echo ""
echo "3Ô∏è‚É£ Updating IAM policy for new table..."

# Get current policy
CURRENT_POLICY=$(aws iam get-role-policy \
    --role-name "$IOT_ROLE_NAME" \
    --policy-name "IoTMessageLoggerPolicy" \
    --query 'PolicyDocument' \
    --output json)

# Add new table to policy (simple approach - add to existing resources)
NEW_TABLE_ARN="arn:aws:dynamodb:$REGION:$ACCOUNT_ID:table/$TABLE_NAME"

# Create updated policy with new table
cat > temp_policy.json << EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:Query"
            ],
            "Resource": [
                "arn:aws:dynamodb:$REGION:$ACCOUNT_ID:table/iot-message-log",
                "arn:aws:dynamodb:$REGION:$ACCOUNT_ID:table/plcnext",
                "arn:aws:dynamodb:$REGION:$ACCOUNT_ID:table/pLCNext_v1",
                "$NEW_TABLE_ARN"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
            ],
            "Resource": "*"
        }
    ]
}
EOF

# Apply updated policy
aws iam put-role-policy \
    --role-name "$IOT_ROLE_NAME" \
    --policy-name "IoTMessageLoggerPolicy" \
    --policy-document file://temp_policy.json && \
    echo "‚úÖ IAM policy updated!" || \
    { echo "‚ùå IAM policy update failed!"; exit 1; }

rm temp_policy.json

# Step 4: Create IoT rule with CORRECT schema mapping
echo ""
echo "4Ô∏è‚É£ Creating IoT rule with correct schema mapping..."

RULE_NAME="${TABLE_NAME}_Rule"

cat > temp_rule.json << EOF
{
    "sql": "SELECT *, topic() as topic_name, timestamp() as rule_timestamp FROM '$TOPIC_FILTER'",
    "description": "Auto-generated rule for $TABLE_NAME table with correct schema",
    "ruleDisabled": false,
    "awsIotSqlVersion": "2016-03-23",
    "actions": [
        {
            "dynamoDB": {
                "tableName": "$TABLE_NAME",
                "roleArn": "arn:aws:iam::$ACCOUNT_ID:role/$IOT_ROLE_NAME",
                "operation": "INSERT",
                "hashKeyField": "timestamp",
                "hashKeyValue": "\${timestamp()}",
                "hashKeyType": "STRING",
                "rangeKeyField": "topic",
                "rangeKeyValue": "\${topic()}",
                "rangeKeyType": "STRING"
            }
        }
    ]
}
EOF

# Create the IoT rule
aws iot create-topic-rule \
    --rule-name "$RULE_NAME" \
    --topic-rule-payload file://temp_rule.json \
    --region $REGION && \
    echo "‚úÖ IoT rule created successfully!" || \
    { echo "‚ùå IoT rule creation failed!"; exit 1; }

rm temp_rule.json

# Step 5: Test the setup
echo ""
echo "5Ô∏è‚É£ Testing the setup..."

# Create test message
TEST_ID=$(date +%s)
cat > test_message.json << EOF
{
    "test_id": "setup_test_$TEST_ID",
    "device_id": "setup_test_device",
    "temperature": 25.0,
    "status": "testing_new_setup",
    "message": "Test message for $TABLE_NAME setup"
}
EOF

# Publish test message
aws iot-data publish \
    --topic "test/$TABLE_NAME/setup" \
    --payload file://test_message.json \
    --region $REGION && \
    echo "‚úÖ Test message published!" || \
    { echo "‚ùå Test message failed!"; exit 1; }

rm test_message.json

echo ""
echo "üéâ SETUP COMPLETE!"
echo "=" * 30
echo "‚úÖ Table: $TABLE_NAME"
echo "‚úÖ Rule: $RULE_NAME"
echo "‚úÖ Topic Filter: $TOPIC_FILTER"
echo "‚úÖ Test message sent"
echo ""
echo "‚è≥ Wait 30 seconds, then check table:"
echo "   aws dynamodb scan --table-name $TABLE_NAME --limit 5"
echo ""
echo "üîç To verify rule is working:"
echo "   aws iot get-topic-rule --rule-name $RULE_NAME"
